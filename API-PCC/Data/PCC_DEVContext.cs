// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using API_PCC.EntityModels;
using API_PCC.Models;
using Microsoft.EntityFrameworkCore;

namespace API_PCC.Data;

public partial class PCC_DEVContext : DbContext
{
    public PCC_DEVContext(DbContextOptions<PCC_DEVContext> options)
        : base(options)
    {
    }
    public virtual DbSet<TblDataGroup> TblDataGroups { get; set; }

    public virtual DbSet<TblFarmOwner> TblFarmOwners { get; set; }

    public virtual DbSet<TblFarmerBreedType> TblFarmerBreedTypes { get; set; }

    public virtual DbSet<TblHerdFarmer> TblHerdFarmers { get; set; }
    public virtual DbSet<ABirthType> ABirthTypes { get; set; }

    public virtual DbSet<ABloodComp> ABloodComps { get; set; }

    public virtual DbSet<ABreed> ABreeds { get; set; }

    public virtual DbSet<ABuffAnimal> ABuffAnimals { get; set; }

    public virtual DbSet<ATypeOwnership> ATypeOwnerships { get; set; }

    public virtual DbSet<ActionTbl> ActionTbls { get; set; }

    public virtual DbSet<HBuffHerd> HBuffHerds { get; set; }

    public virtual DbSet<HBuffaloType> HBuffaloTypes { get; set; }

    public virtual DbSet<HFarmerAffiliation> HFarmerAffiliations { get; set; }

    public virtual DbSet<HFeedingSystem> HFeedingSystems { get; set; }

    public virtual DbSet<HHerdClassification> HHerdClassifications { get; set; }

    public virtual DbSet<ModuleTbl> ModuleTbls { get; set; }

    public virtual DbSet<TblApiTokenModel> TblApiTokenModels { get; set; }
    public virtual DbSet<TblFarmers> Tbl_Farmers { get; set; }    
    public virtual DbSet<FarmFeedingSystem> tbl_FarmerFeedingSystem { get; set; }

    public virtual DbSet<TblAttempt> TblAttempts { get; set; }

    public virtual DbSet<TblCenterModel> TblCenterModels { get; set; }

    public virtual DbSet<TblRegistrationOtpmodel> TblRegistrationOtpmodels { get; set; }
    public virtual DbSet<TblFarmerAffiliation> Tbl_FarmerAffialiation { get; set; }

    public virtual DbSet<TblSettings> TblSettings { get; set; }
    public virtual DbSet<TblStatusModel> TblStatusModels { get; set; }

    public virtual DbSet<TblUsersModel> TblUsersModels { get; set; }

    public virtual DbSet<TblTokenModel> TblTokenModels { get; set; }

    public virtual DbSet<TblMailSenderCredential> TblMailSenderCredentials { get; set; }

    public virtual DbSet<TblOriginOfAcquisitionModel> OriginOfAcquisitionModels { get; set; }

    public virtual DbSet<SireModel> tblSireModels { get; set; }
    public virtual DbSet<DamModel> tblDamModels { get; set; }

    public virtual DbSet<TblUserTypeModel> tblUserTypeModels { get; set; }
    public virtual DbSet<BuffHerdJoinTable> HerdJoinTables { get; set; }

    public virtual DbSet<TblBLoodCalculator> bloodCalculators { get; set; }

    public virtual DbSet<A_Family> family { get; set; }
    public virtual DbSet<TransferModel> TransferModels { get; set; }
   
    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        //modelBuilder.Entity<TblFarmerBreedType>().HasNoKey(); // Ensure it's a keyless entity
        modelBuilder.Entity<ABirthType>(entity =>
        {
            entity.ToTable("A_Birth_Type");

            entity.Property(e => e.BirthTypeCode)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Birth_Type_Code");
            entity.Property(e => e.BirthTypeDesc)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Birth_Type_Desc");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .IsUnicode(false)
                .HasColumnName("Created_By");
            entity.Property(e => e.DateCreated)
                .HasColumnType("date")
                .HasColumnName("Date_Created");
            entity.Property(e => e.DateDeleted)
                .HasColumnType("date")
                .HasColumnName("Date_Deleted");
            entity.Property(e => e.DateRestored)
                .HasColumnType("date")
                .HasColumnName("Date_Restored");
            entity.Property(e => e.DateUpdated)
                .HasColumnType("date")
                .HasColumnName("Date_Updated");
            entity.Property(e => e.DeleteFlag).HasColumnName("Delete_Flag");
            entity.Property(e => e.DeletedBy)
                .IsUnicode(false)
                .HasColumnName("Deleted_By");
            entity.Property(e => e.RestoredBy)
                .IsUnicode(false)
                .HasColumnName("Restored_By");
            entity.Property(e => e.UpdatedBy)
                .IsRequired()
                .IsUnicode(false)
                .HasColumnName("Updated_By");
        });

        modelBuilder.Entity<ABloodComp>(entity =>
        {
            entity.ToTable("A_Blood_Comp");

            entity.Property(e => e.BloodCode)
                .IsRequired()
                .HasMaxLength(24)
                .IsUnicode(false)
                .HasColumnName("Blood_Code");
            entity.Property(e => e.BloodDesc)
                .IsRequired()
                .HasMaxLength(24)
                .IsUnicode(false)
                .HasColumnName("Blood_Desc");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .IsUnicode(false)
                .HasColumnName("Created_By");
            entity.Property(e => e.damBreed)
                .IsUnicode(false)
                .HasColumnName("Dam_Breed");
            entity.Property(e => e.DateCreated)
                .HasColumnType("date")
                .HasColumnName("Date_Created");
            entity.Property(e => e.DateDeleted)
                .HasColumnType("date")
                .HasColumnName("Date_Deleted");
            entity.Property(e => e.DateRestored)
                .HasColumnType("date")
                .HasColumnName("Date_Restored");
            entity.Property(e => e.DateUpdated)
                .HasColumnType("date")
                .HasColumnName("Date_Updated");
            entity.Property(e => e.DeleteFlag).HasColumnName("Delete_Flag");
            entity.Property(e => e.DeletedBy)
                .IsUnicode(false)
                .HasColumnName("Deleted_By");
            entity.Property(e => e.RestoredBy)
                .IsUnicode(false)
                .HasColumnName("Restored_By");
            entity.Property(e => e.sireBreed)
                .IsUnicode(false)
                .HasColumnName("Sire_Breed");
            entity.Property(e => e.UpdatedBy)
                .IsRequired()
                .IsUnicode(false)
                .HasColumnName("Updated_By");
        });

        modelBuilder.Entity<ABreed>(entity =>
        {
            entity.ToTable("A_Breed");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.BreedCode)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("Breed_Code");
            entity.Property(e => e.BreedDesc)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("Breed_Desc");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .IsUnicode(false)
                .HasColumnName("Created_By");
            entity.Property(e => e.DateCreated)
                .HasColumnType("date")
                .HasColumnName("Date_Created");
            entity.Property(e => e.DateDeleted)
                .HasColumnType("date")
                .HasColumnName("Date_Deleted");
            entity.Property(e => e.DateRestored)
                .HasColumnType("date")
                .HasColumnName("Date_Restored");
            entity.Property(e => e.DateUpdated)
                .HasColumnType("date")
                .HasColumnName("Date_Updated");
            entity.Property(e => e.DeleteFlag).HasColumnName("Delete_Flag");
            entity.Property(e => e.DeletedBy)
                .IsUnicode(false)
                .HasColumnName("Deleted_By");
            entity.Property(e => e.RestoredBy)
                .IsUnicode(false)
                .HasColumnName("Restored_By");
            entity.Property(e => e.UpdatedBy)
                .IsUnicode(false)
                .HasColumnName("Updated_By");
        });

        modelBuilder.Entity<ABuffAnimal>(entity =>
        {
            entity.ToTable("A_Buff_Animal");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AnimalIdNumber)
                .IsUnicode(false)
                .HasColumnName("Animal_ID_Number");
            entity.Property(e => e.AnimalName)
                .IsUnicode(false)
                .HasColumnName("Animal_Name");
            entity.Property(e => e.BirthType)
                .IsUnicode(false)
                .HasColumnName("Birth_Type");
            entity.Property(e => e.BloodCode).HasColumnName("Blood_Code");
            entity.Property(e => e.Blood_Comp).HasColumnName("Blood_Comp");
            entity.Property(e => e.BloodResult).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.BreedCode)
                .IsUnicode(false)
                .HasColumnName("Breed_Code");
            entity.Property(e => e.breedRegistryNumber).IsUnicode(false);
            entity.Property(e => e.CountryOfBirth)
                .IsUnicode(false)
                .HasColumnName("Country_Of_Birth");
            entity.Property(e => e.CreatedBy)
                .IsUnicode(false)
                .HasColumnName("Created_By");
            entity.Property(e => e.CreatedDate)
                .HasColumnType("date")
                .HasColumnName("Created_Date");
            entity.Property(e => e.DamId).HasColumnName("Dam_ID");
            entity.Property(e => e.DateDeleted)
                .HasColumnType("date")
                .HasColumnName("Date_Deleted");
            entity.Property(e => e.DateOfAcquisition)
                .HasColumnType("date")
                .HasColumnName("Date_Of_Acquisition");
            entity.Property(e => e.DateOfBirth)
                .HasColumnType("date")
                .HasColumnName("Date_of_Birth");
            entity.Property(e => e.DateRestored)
                .HasColumnType("date")
                .HasColumnName("Date_Restored");
            entity.Property(e => e.DeleteFlag).HasColumnName("Delete_Flag");
            entity.Property(e => e.DeletedBy)
                .IsUnicode(false)
                .HasColumnName("Deleted_By");
            entity.Property(e => e.HerdCode)
                .IsUnicode(false)
                .HasColumnName("Herd_Code");
            entity.Property(e => e.Marking).IsUnicode(false);
            entity.Property(e => e.OriginOfAcquisition).HasColumnName("Origin_Of_Acquisition");
            entity.Property(e => e.Photo).IsUnicode(false);
            entity.Property(e => e.RestoredBy)
                .IsUnicode(false)
                .HasColumnName("Restored_By");
            entity.Property(e => e.RfidNumber)
                .IsUnicode(false)
                .HasColumnName("RFID_Number");
            entity.Property(e => e.Sex).IsUnicode(false);
            entity.Property(e => e.SireId).HasColumnName("Sire_ID");
            entity.Property(e => e.Status).IsUnicode(false);
            entity.Property(e => e.TypeOfOwnership)
                .IsUnicode(false)
                .HasColumnName("Type_Of_Ownership");
            entity.Property(e => e.UpdateDate)
                .HasColumnType("date")
                .HasColumnName("Update_Date");
            entity.Property(e => e.UpdatedBy)
                .IsUnicode(false)
                .HasColumnName("Updated_By");
        });

        modelBuilder.Entity<A_Family>(entity =>
        {
            entity.ToTable("A_Family");

            entity.Property(e => e.CreatedBy)
                .IsUnicode(false)
                .HasColumnName("Created_By");
            entity.Property(e => e.CreatedDate)
                .HasColumnType("date")
                .HasColumnName("Created_Date");
            entity.Property(e => e.DateDeleted)
                .HasColumnType("date")
                .HasColumnName("Date_Deleted");
            entity.Property(e => e.DateRestored)
                .HasColumnType("date")
                .HasColumnName("Date_Restored");
            entity.Property(e => e.deleteFlag).HasColumnName("Delete_Flag");
            entity.Property(e => e.DeletedBy)
                .IsUnicode(false)
                .HasColumnName("Deleted_By");
            entity.Property(e => e.RestoredBy)
                .IsUnicode(false)
                .HasColumnName("Restored_By");
            entity.Property(e => e.UpdateDate)
                .HasColumnType("date")
                .HasColumnName("Update_Date");
            entity.Property(e => e.UpdatedBy)
                .IsUnicode(false)
                .HasColumnName("Updated_By");
        });

        modelBuilder.Entity<ATypeOwnership>(entity =>
        {
            entity.ToTable("A_Type_Ownership");

            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .IsUnicode(false)
                .HasColumnName("Created_By");
            entity.Property(e => e.DateCreated)
                .HasColumnType("date")
                .HasColumnName("Date_Created");
            entity.Property(e => e.DateDeleted)
                .HasColumnType("date")
                .HasColumnName("Date_Deleted");
            entity.Property(e => e.DateRestored)
                .HasColumnType("date")
                .HasColumnName("Date_Restored");
            entity.Property(e => e.DateUpdated)
                .HasColumnType("date")
                .HasColumnName("Date_Updated");
            entity.Property(e => e.DeleteFlag).HasColumnName("Delete_Flag");
            entity.Property(e => e.DeletedBy)
                .IsUnicode(false)
                .HasColumnName("Deleted_By");
            entity.Property(e => e.RestoredBy)
                .IsUnicode(false)
                .HasColumnName("Restored_By");
            entity.Property(e => e.TypeOwnCode)
                .IsRequired()
                .IsUnicode(false)
                .HasColumnName("Type_Own_Code");
            entity.Property(e => e.TypeOwnDesc)
                .IsRequired()
                .IsUnicode(false)
                .HasColumnName("Type_Own_Desc");
            entity.Property(e => e.UpdatedBy)
                .IsRequired()
                .IsUnicode(false)
                .HasColumnName("Updated_By");
        });

        modelBuilder.Entity<ActionTbl>(entity =>
        {
            entity.HasKey(e => e.ActionId).HasName("PK_Action");

            entity.ToTable("Action_tbl");

            entity.Property(e => e.ActionId).HasColumnName("Action_Id");
            entity.Property(e => e.ActionName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Action_name");
            entity.Property(e => e.CreatedBy)
                .IsUnicode(false)
                .HasColumnName("Created_By");
            entity.Property(e => e.DateCreated)
                .HasColumnType("date")
                .HasColumnName("Date_Created");
            entity.Property(e => e.DateDeleted)
                .HasColumnType("date")
                .HasColumnName("Date_Deleted");
            entity.Property(e => e.DateRestored)
                .HasColumnType("date")
                .HasColumnName("Date_Restored");
            entity.Property(e => e.DateUpdated)
                .HasColumnType("date")
                .HasColumnName("Date_Updated");
            entity.Property(e => e.DeleteFlag).HasColumnName("Delete_Flag");
            entity.Property(e => e.DeletedBy)
                .IsUnicode(false)
                .HasColumnName("Deleted_By");
            entity.Property(e => e.ModuleId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Module_Id");
            entity.Property(e => e.RestoredBy)
                .IsUnicode(false)
                .HasColumnName("Restored_By");
            entity.Property(e => e.UpdatedBy)
                .IsUnicode(false)
                .HasColumnName("Updated_By");
        });

        modelBuilder.Entity<HBuffHerd>(entity =>
        {
            entity.ToTable("H_Buff_Herd");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .IsUnicode(false)
                .HasColumnName("Created_By");
            entity.Property(e => e.DateCreated)
                .HasColumnType("date")
                .HasColumnName("Date_Created");
            entity.Property(e => e.DateDeleted)
                .HasColumnType("date")
                .HasColumnName("Date_Deleted");
            entity.Property(e => e.DateRestored)
                .HasColumnType("date")
                .HasColumnName("Date_Restored");
            entity.Property(e => e.DateUpdated)
                .HasColumnType("date")
                .HasColumnName("Date_Updated");
            entity.Property(e => e.DeleteFlag).HasColumnName("Delete_Flag");
            entity.Property(e => e.DeletedBy)
                .IsUnicode(false)
                .HasColumnName("Deleted_By");
            entity.Property(e => e.FarmAddress)
                .IsRequired()
                .IsUnicode(false)
                .HasColumnName("Farm_Address");
            entity.Property(e => e.FarmAffilCode)
                .IsRequired()
                .IsUnicode(false)
                .HasColumnName("Farm_Affil_Code");
            entity.Property(e => e.FarmManager)
                .IsRequired()
                .IsUnicode(false)
                .HasColumnName("Farm_Manager");
            entity.Property(e => e.HerdClassDesc)
                .IsRequired()
                .IsUnicode(false)
                .HasColumnName("Herd_Class_Desc");
            entity.Property(e => e.HerdCode)
                .IsRequired()
                .IsUnicode(false)
                .HasColumnName("Herd_Code");
            entity.Property(e => e.HerdName)
                .IsRequired()
                .IsUnicode(false)
                .HasColumnName("Herd_Name");
            entity.Property(e => e.HerdSize).HasColumnName("Herd_Size");
            entity.Property(e => e.OrganizationName)
                .IsUnicode(false)
                .HasColumnName("Organization_name");
            entity.Property(e => e.Photo).IsUnicode(false);
            entity.Property(e => e.RestoredBy)
                .IsUnicode(false)
                .HasColumnName("Restored_By");
            entity.Property(e => e.UpdatedBy)
                .IsUnicode(false)
                .HasColumnName("Updated_By");
        });

        modelBuilder.Entity<HBuffaloType>(entity =>
        {
            entity.ToTable("H_Buffalo_Type");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.BreedTypeCode)
                .IsRequired()
                .IsUnicode(false)
                .HasColumnName("Breed_Type_Code");
            entity.Property(e => e.BreedTypeDesc)
                .IsRequired()
                .IsUnicode(false)
                .HasColumnName("Breed_Type_Desc");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .IsUnicode(false)
                .HasColumnName("Created_By");
            entity.Property(e => e.DateCreated)
                .HasColumnType("date")
                .HasColumnName("Date_Created");
            entity.Property(e => e.DateDeleted)
                .HasColumnType("date")
                .HasColumnName("Date_Deleted");
            entity.Property(e => e.DateRestored)
                .HasColumnType("date")
                .HasColumnName("Date_Restored");
            entity.Property(e => e.DateUpdated)
                .HasColumnType("date")
                .HasColumnName("Date_Updated");
            entity.Property(e => e.DeleteFlag).HasColumnName("Delete_Flag");
            entity.Property(e => e.DeletedBy)
                .IsUnicode(false)
                .HasColumnName("Deleted_By");
            entity.Property(e => e.RestoredBy)
                .IsUnicode(false)
                .HasColumnName("Restored_By");
            entity.Property(e => e.UpdatedBy)
                .IsUnicode(false)
                .HasColumnName("Updated_By");
        });

        modelBuilder.Entity<HFarmerAffiliation>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_H");

            entity.ToTable("H_Farmer_Affiliation");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .IsUnicode(false)
                .HasColumnName("Created_By");
            entity.Property(e => e.DateCreated)
                .HasColumnType("date")
                .HasColumnName("Date_Created");
            entity.Property(e => e.DateDeleted)
                .HasColumnType("date")
                .HasColumnName("Date_Deleted");
            entity.Property(e => e.DateRestored)
                .HasColumnType("date")
                .HasColumnName("Date_Restored");
            entity.Property(e => e.DateUpdated)
                .HasColumnType("date")
                .HasColumnName("Date_Updated");
            entity.Property(e => e.DeleteFlag).HasColumnName("Delete_Flag");
            entity.Property(e => e.DeletedBy)
                .IsUnicode(false)
                .HasColumnName("Deleted_By");
            entity.Property(e => e.FCode)
                .IsRequired()
                .IsUnicode(false)
                .HasColumnName("F_Code");
            entity.Property(e => e.FDesc)
                .IsRequired()
                .IsUnicode(false)
                .HasColumnName("F_Desc");
            entity.Property(e => e.RestoredBy)
                .IsUnicode(false)
                .HasColumnName("Restored_By");
            entity.Property(e => e.UpdatedBy)
                .IsRequired()
                .IsUnicode(false)
                .HasColumnName("Updated_By");
        });

        modelBuilder.Entity<HFeedingSystem>(entity =>
        {
            entity.ToTable("H_Feeding_System");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .IsUnicode(false)
                .HasColumnName("Created_By");
            entity.Property(e => e.DateCreated)
                .HasColumnType("date")
                .HasColumnName("Date_Created");
            entity.Property(e => e.DateDeleted)
                .HasColumnType("date")
                .HasColumnName("Date_Deleted");
            entity.Property(e => e.DateRestored)
                .HasColumnType("date")
                .HasColumnName("Date_Restored");
            entity.Property(e => e.DateUpdated)
                .HasColumnType("date")
                .HasColumnName("Date_Updated");
            entity.Property(e => e.DeleteFlag).HasColumnName("Delete_Flag");
            entity.Property(e => e.DeletedBy)
                .IsUnicode(false)
                .HasColumnName("Deleted_By");
            entity.Property(e => e.FeedingSystemCode)
                .IsRequired()
                .IsUnicode(false);
            entity.Property(e => e.FeedingSystemDesc)
                .IsRequired()
                .IsUnicode(false);
            entity.Property(e => e.RestoredBy)
                .IsUnicode(false)
                .HasColumnName("Restored_By");
            entity.Property(e => e.UpdatedBy)
                .IsRequired()
                .IsUnicode(false)
                .HasColumnName("Updated_By");
        });

        modelBuilder.Entity<HHerdClassification>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_H_Herd_Type");

            entity.ToTable("H_Herd_Classification");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .IsUnicode(false)
                .HasColumnName("Created_By");
            entity.Property(e => e.DateCreated)
                .HasColumnType("date")
                .HasColumnName("Date_Created");
            entity.Property(e => e.DateDeleted)
                .HasColumnType("date")
                .HasColumnName("Date_Deleted");
            entity.Property(e => e.DateRestored)
                .HasColumnType("date")
                .HasColumnName("Date_Restored");
            entity.Property(e => e.DateUpdated)
                .HasColumnType("date")
                .HasColumnName("Date_Updated");
            entity.Property(e => e.DeleteFlag).HasColumnName("Delete_Flag");
            entity.Property(e => e.DeletedBy)
                .IsUnicode(false)
                .HasColumnName("Deleted_By");
            entity.Property(e => e.HerdClassCode)
                .IsRequired()
                .IsUnicode(false)
                .HasColumnName("Herd_Class_Code");
            entity.Property(e => e.HerdClassDesc)
                .IsRequired()
                .IsUnicode(false)
                .HasColumnName("Herd_Class_Desc");
            entity.Property(e => e.LevelFrom).HasColumnName("Level_from");
            entity.Property(e => e.LevelTo).HasColumnName("Level_to");
            entity.Property(e => e.RestoredBy)
                .IsUnicode(false)
                .HasColumnName("Restored_By");
            entity.Property(e => e.UpdatedBy)
                .IsRequired()
                .IsUnicode(false)
                .HasColumnName("Updated_By");
        });

        modelBuilder.Entity<ModuleTbl>(entity =>
        {
            entity.HasKey(e => e.ModuleId).HasName("PK_Module");

            entity.ToTable("Module_tbl");

            entity.Property(e => e.ModuleId).HasColumnName("Module_Id");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .IsUnicode(false)
                .HasColumnName("Created_By");
            entity.Property(e => e.DateCreated)
                .HasColumnType("date")
                .HasColumnName("Date_Created");
            entity.Property(e => e.DateDeleted)
                .HasColumnType("date")
                .HasColumnName("Date_Deleted");
            entity.Property(e => e.DateRestored)
                .HasColumnType("date")
                .HasColumnName("Date_Restored");
            entity.Property(e => e.DateUpdated)
                .HasColumnType("date")
                .HasColumnName("Date_Updated");
            entity.Property(e => e.DeleteFlag).HasColumnName("Delete_Flag");
            entity.Property(e => e.DeletedBy)
                .IsUnicode(false)
                .HasColumnName("Deleted_By");
            entity.Property(e => e.ModuleName)
                .IsRequired()
                .IsUnicode(false)
                .HasColumnName("Module_Name");
            entity.Property(e => e.ParentModule)
                .IsRequired()
                .IsUnicode(false)
                .HasColumnName("Parent_Module");
            entity.Property(e => e.RestoredBy)
                .IsUnicode(false)
                .HasColumnName("Restored_By");
            entity.Property(e => e.UpdatedBy)
                .IsUnicode(false)
                .HasColumnName("Updated_By");
        });

        modelBuilder.Entity<TblApiTokenModel>(entity =>
        {
            entity.ToTable("tbl_ApiTokenModel");

            entity.Property(e => e.ApiToken).IsUnicode(false);
            entity.Property(e => e.Name).IsUnicode(false);
            entity.Property(e => e.Role).IsUnicode(false);
        });

        modelBuilder.Entity<TblAudittrail>(entity =>
        {
            entity.ToTable("tbl_audittrail");

            entity.Property(e => e.Actions)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Module)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.Status).HasColumnName("status");
            entity.Property(e => e.UserId)
                .HasMaxLength(250)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TblBLoodCalculator>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_TblBLoodCalculator");
            entity.ToTable("TblBLoodCalculator");

            entity.Property(e => e.Id)
                .HasColumnName("Id");
            entity.Property(e => e.Name)
                .HasColumnName("Name");
            entity.Property(e => e.Criteria)
                .HasColumnName("Criteria");
            entity.Property(e => e.Formula)
                .HasColumnName("Formula");
        });

        modelBuilder.Entity<TblCenterModel>(entity =>
        {
            entity.ToTable("tbl_CenterModel");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Address).IsUnicode(false);
            entity.Property(e => e.CenterCode).IsUnicode(false);
            entity.Property(e => e.CenterDesc)
                .IsUnicode(false)
                .HasColumnName("Center_desc");
            entity.Property(e => e.CenterName).IsUnicode(false);
            entity.Property(e => e.ContactPerson).IsUnicode(false);
            entity.Property(e => e.CreatedBy)
                .IsUnicode(false)
                .HasColumnName("Created_By");
            entity.Property(e => e.DateCreated)
                .HasColumnType("date")
                .HasColumnName("Date_Created");
            entity.Property(e => e.DateDeleted)
                .HasColumnType("date")
                .HasColumnName("Date_Deleted");
            entity.Property(e => e.DateRestored)
                .HasColumnType("date")
                .HasColumnName("Date_Restored");
            entity.Property(e => e.DateUpdated)
                .HasColumnType("date")
                .HasColumnName("Date_Updated");
            entity.Property(e => e.DeleteFlag).HasColumnName("Delete_Flag");
            entity.Property(e => e.DeletedBy)
                .IsUnicode(false)
                .HasColumnName("Deleted_By");
            entity.Property(e => e.Email)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.MobileNumber)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.RestoredBy)
                .IsUnicode(false)
                .HasColumnName("Restored_By");
            entity.Property(e => e.TelNumber)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.UpdatedBy)
                .IsUnicode(false)
                .HasColumnName("Updated_By");
        });

        modelBuilder.Entity<DamModel>(entity =>
        {
            entity.ToTable("tbl_DamModel");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.BloodCode)
                .IsUnicode(false)
                .HasColumnName("Blood_Code");
            entity.Property(e => e.BreedCode)
                .IsUnicode(false)
                .HasColumnName("Breed_Code");
            entity.Property(e => e.DamIdNumber)
                .IsUnicode(false)
                .HasColumnName("Dam_Id_Number");
            entity.Property(e => e.DamName)
                .IsUnicode(false)
                .HasColumnName("Dam_Name");
            entity.Property(e => e.DamRegistrationNumber)
                .IsUnicode(false)
                .HasColumnName("Dam_Registration_Number");
        });

        modelBuilder.Entity<TblDataGroup>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tbl_DataGroup");

            entity.Property(e => e.Name)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TblFarmOwner>(entity =>
        {
            entity.ToTable("tbl_FarmOwner");

            entity.Property(e => e.Address).IsUnicode(false);
            entity.Property(e => e.Email).IsUnicode(false);
            entity.Property(e => e.FirstName).IsUnicode(false);
            entity.Property(e => e.LastName).IsUnicode(false);
            entity.Property(e => e.MobileNumber).IsUnicode(false);
            entity.Property(e => e.TelephoneNumber).IsUnicode(false);
        });

        modelBuilder.Entity<TblFarmerBreedType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_tbl_FarmerBreedType");

            entity
                //.HasNoKey()
                .ToTable("tbl_FarmerBreedType");

            entity.Property(e => e.BreedTypeId).HasColumnName("BreedType_Id");
            entity.Property(e => e.CreatedAt)
                .HasColumnType("datetime")
                .HasColumnName("Created_At");
            entity.Property(e => e.CreatedBy).HasColumnName("Created_By");
            entity.Property(e => e.DeletedAt)
                .HasColumnType("datetime")
                .HasColumnName("Deleted_At");
            entity.Property(e => e.DeletedBy).HasColumnName("Deleted_By");
            entity.Property(e => e.FarmerId).HasColumnName("Farmer_Id");
            entity.Property(e => e.IsDeleted).HasColumnName("Is_Deleted");
        });

        modelBuilder.Entity<TblHerdFarmer>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tbl_HerdFarmer");

            entity.Property(e => e.CreatedAt)
                .HasColumnType("datetime")
                .HasColumnName("Created_At");
            entity.Property(e => e.CreatedBy).HasColumnName("Created_By");
            entity.Property(e => e.DeletedAt)
                .HasColumnType("datetime")
                .HasColumnName("Deleted_At");
            entity.Property(e => e.DeletedBy).HasColumnName("Deleted_By");
            entity.Property(e => e.FarmerId).HasColumnName("Farmer_Id");
            entity.Property(e => e.HerdId).HasColumnName("Herd_Id");
            entity.Property(e => e.IsDeleted).HasColumnName("Is_Deleted");
        });

        modelBuilder.Entity<BuffHerdJoinTable>(entity =>
        {
            entity.ToTable("tbl_Join_BuffHerd");

            entity.HasKey(e => e.BuffHerdJoinTableId).HasName("PK_tbl_Join_BuffHerd");

            entity.Property(e => e.BuffHerdJoinTableId)
                  .HasColumnName("Join_BuffHerd_Id");
            entity.Property(e => e.BuffaloTypeId)
                  .HasColumnName("Buffalo_Type_Id");
            entity.Property(e => e.BuffHerdId)
                  .HasColumnName("Buff_Herd_Id");
            entity.Property(e => e.FeedingSystemId)
                 .HasColumnName("Feeding_System_Id");
        });
        modelBuilder.Entity<TblMailSenderCredential>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_MailSenderCredential");

            entity.ToTable("tbl_MailSenderCredential");

            entity.Property(e => e.DateCreated).HasColumnType("date");
            entity.Property(e => e.Email)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.ExpiryDate).HasColumnType("datetime");
            entity.Property(e => e.Password)
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TblOriginOfAcquisitionModel>(entity =>
        {
            entity.ToTable("tbl_OriginOfAcquisitionModel");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Barangay).IsUnicode(false);
            entity.Property(e => e.City).IsUnicode(false);
            entity.Property(e => e.Province).IsUnicode(false);
            entity.Property(e => e.Region).IsUnicode(false);
        });

        modelBuilder.Entity<TblRegistrationOtpmodel>(entity =>
        {
            entity.ToTable("tbl_RegistrationOTPModel");

            entity.Property(e => e.Email).IsUnicode(false);
            entity.Property(e => e.Otp)
                .IsUnicode(false)
                .HasColumnName("OTP");
        });

        modelBuilder.Entity<TblSetting>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__tbl_Sett__3214EC0719BE9FC7");

            entity.ToTable("tbl_Settings");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.Address)
                .IsRequired()
                .IsUnicode(false);
            entity.Property(e => e.BreedRegistryNumberLength)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Breed_Registry_Number_Length");
            entity.Property(e => e.BusinessName)
                .IsRequired()
                .IsUnicode(false)
                .HasColumnName("Business_Name");
            entity.Property(e => e.ContactNumber)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Contact_Number");
            entity.Property(e => e.DateUpdated)
                .HasColumnType("datetime")
                .HasColumnName("Date_Updated");
            entity.Property(e => e.Email)
                .IsRequired()
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.HerdCodeLength)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Herd_Code_Length");
            entity.Property(e => e.IdNumberLength)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ID_Number_Length");
            entity.Property(e => e.PedigreeCertSignatoryFirstName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Pedigree_Cert_Signatory_FirstName");
            entity.Property(e => e.PedigreeCertSignatoryLastName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Pedigree_Cert_Signatory_LastName");
            entity.Property(e => e.PedigreeCertSignatorySignature)
                .IsUnicode(false)
                .HasColumnName("Pedigree_Cert_Signatory_Signature");
            entity.Property(e => e.PedigreeSignatoryFirstName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Pedigree_Signatory_FirstName");
            entity.Property(e => e.PedigreeSignatoryLastName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Pedigree_Signatory_LastName");
            entity.Property(e => e.PedigreeSignatorySignature)
                .IsUnicode(false)
                .HasColumnName("Pedigree_Signatory_Signature");
            entity.Property(e => e.UpdatedBy)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Updated_By");
            entity.Property(e => e.Watermark).IsUnicode(false);
        });

        modelBuilder.Entity<TblSireModel>(entity =>
        {
            entity.ToTable("tbl_SireModel");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.BloodCode)
                .IsUnicode(false)
                .HasColumnName("Blood_Code");
            entity.Property(e => e.BreedCode)
                .IsUnicode(false)
                .HasColumnName("Breed_Code");
            entity.Property(e => e.SireIdNumber)
                .IsUnicode(false)
                .HasColumnName("Sire_Id_Number");
            entity.Property(e => e.SireName)
                .IsUnicode(false)
                .HasColumnName("Sire_Name");
            entity.Property(e => e.SireRegistrationNumber)
                .IsUnicode(false)
                .HasColumnName("Sire_Registration_Number");
        });

        modelBuilder.Entity<TblStatusModel>(entity =>
        {
            entity.ToTable("tbl_StatusModel");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TblTokenModel>(entity =>
        {
            entity.ToTable("tbl_TokenModel");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.DateCreated)
                .HasColumnType("date")
                .HasColumnName("Date_Created");
            entity.Property(e => e.ExpiryDate).HasColumnType("date");
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Token)
                .IsRequired()
                .IsUnicode(false);
        });

        modelBuilder.Entity<TransferModel>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_tbl_Transfer");

            entity.ToTable("tbl_TransferModel");

            entity.Property(e => e.Address).IsUnicode(false);
            entity.Property(e => e.CreatedBy)
                .IsUnicode(false)
                .HasColumnName("Created_By");
            entity.Property(e => e.DateCreated)
                .HasColumnType("date")
                .HasColumnName("Date_Created");
            entity.Property(e => e.DateDeleted)
                .HasColumnType("date")
                .HasColumnName("Date_Deleted");
            entity.Property(e => e.DateRestored)
                .HasColumnType("date")
                .HasColumnName("Date_Restored");
            entity.Property(e => e.DateUpdated)
                .HasColumnType("date")
                .HasColumnName("Date_Updated");
            entity.Property(e => e.DeleteFlag).HasColumnName("Delete_Flag");
            entity.Property(e => e.DeletedBy)
                .IsUnicode(false)
                .HasColumnName("Deleted_By");
            entity.Property(e => e.Email).IsUnicode(false);
            entity.Property(e => e.MobileNumber)
                .IsUnicode(false)
                .HasColumnName("Mobile_Number");
            entity.Property(e => e.RestoredBy)
                .IsUnicode(false)
                .HasColumnName("Restored_By");
            entity.Property(e => e.TelephoneNumber)
                .IsUnicode(false)
                .HasColumnName("Telephone_Number");
            entity.Property(e => e.TransferFile).HasColumnName("Transfer_File");
            entity.Property(e => e.transferNumber)
                .IsUnicode(false)
                .HasColumnName("Transfer_Number");
            entity.Property(e => e.UpdatedBy)
                .IsUnicode(false)
                .HasColumnName("Updated_By");
        });

        modelBuilder.Entity<TblUserAccessModel>(entity =>
        {
            entity.ToTable("tbl_UserAccessModel");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Module)
                .IsRequired()
                .IsUnicode(false)
                .HasColumnName("module");
            entity.Property(e => e.UserModelId).HasColumnName("userModelId");
        });

        modelBuilder.Entity<TblUserAccessType>(entity =>
        {
            entity.ToTable("tbl_UserAccessType");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Code).HasColumnName("code");
            entity.Property(e => e.UserAccessModelId).HasColumnName("userAccessModelId");
        });

        modelBuilder.Entity<TblUserTypeModel>(entity =>
        {
            entity.ToTable("tbl_UserTypeModel");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.CreatedBy)
                .IsUnicode(false)
                .HasColumnName("Created_By");
            entity.Property(e => e.DateCreated)
                .HasColumnType("date")
                .HasColumnName("Date_Created");
            entity.Property(e => e.DateDeleted)
                .HasColumnType("date")
                .HasColumnName("Date_Deleted");
            entity.Property(e => e.DateRestored)
                .HasColumnType("date")
                .HasColumnName("Date_Restored");
            entity.Property(e => e.DateUpdated)
                .HasColumnType("date")
                .HasColumnName("Date_Updated");
            entity.Property(e => e.DeleteFlag).HasColumnName("Delete_Flag");
            entity.Property(e => e.DeletedBy)
                .IsUnicode(false)
                .HasColumnName("Deleted_By");
            entity.Property(e => e.name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.RestoredBy)
                .IsUnicode(false)
                .HasColumnName("Restored_By");
            entity.Property(e => e.UpdatedBy)
                .IsUnicode(false)
                .HasColumnName("Updated_By");
            entity.Property(e => e.userAccesasId).HasColumnName("userAccesasId");
        });

        modelBuilder.Entity<TblUsersModel>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_UsersModel");

            entity.ToTable("tbl_UsersModel");

            entity.Property(e => e.Address).IsUnicode(false);
            entity.Property(e => e.Cno).IsUnicode(false);
            entity.Property(e => e.CreatedBy)
                .IsUnicode(false)
                .HasColumnName("Created_By");
            entity.Property(e => e.DateCreated)
                .HasColumnType("date")
                .HasColumnName("Date_Created");
            entity.Property(e => e.DateDeleted)
                .HasColumnType("date")
                .HasColumnName("Date_Deleted");
            entity.Property(e => e.DateRestored)
                .HasColumnType("date")
                .HasColumnName("Date_Restored");
            entity.Property(e => e.DateUpdated)
                .HasColumnType("date")
                .HasColumnName("Date_Updated");
            entity.Property(e => e.DeleteFlag).HasColumnName("Delete_Flag");
            entity.Property(e => e.DeletedBy)
                .IsUnicode(false)
                .HasColumnName("Deleted_By");
            entity.Property(e => e.Email)
                .IsRequired()
                .IsUnicode(false);
            entity.Property(e => e.EmployeeId)
                .IsUnicode(false)
                .HasColumnName("EmployeeID");
            entity.Property(e => e.FilePath).IsUnicode(false);
            entity.Property(e => e.Fname).IsUnicode(false);
            entity.Property(e => e.Fullname).IsUnicode(false);
            entity.Property(e => e.Gender).IsUnicode(false);
            entity.Property(e => e.isFarmer).HasColumnName("isFarmer");
            entity.Property(e => e.Jwtoken)
                .IsUnicode(false)
                .HasColumnName("JWToken");
            entity.Property(e => e.Lname).IsUnicode(false);
            entity.Property(e => e.Mname).IsUnicode(false);
            entity.Property(e => e.Password)
                .IsRequired()
                .IsUnicode(false);
            entity.Property(e => e.RememberToken).IsUnicode(false);
            entity.Property(e => e.RestoredBy)
                .IsUnicode(false)
                .HasColumnName("Restored_By");
            entity.Property(e => e.UpdatedBy)
                .IsUnicode(false)
                .HasColumnName("Updated_By");
            entity.Property(e => e.Username).IsUnicode(false);
            entity.Property(e => e.HerdId)
                .IsUnicode(false)
                .HasColumnName("HerdId");
        });

        modelBuilder.Entity<UserActionTable>(entity =>
        {
            entity.ToTable("User_ActionTable");

            entity.Property(e => e.ActionId)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.ActionName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Module)
                .HasMaxLength(250)
                .IsUnicode(false);
        });

        modelBuilder.Entity<UserModuleTable>(entity =>
        {
            entity.ToTable("User_ModuleTable");

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Module)
                .HasMaxLength(250)
                .IsUnicode(false);
        });

        modelBuilder.Entity<UserUserTypeAccessTable>(entity =>
        {
            entity.ToTable("User_UserTypeAccessTable");

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
        });

        OnModelCreatingGeneratedProcedures(modelBuilder);
        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}